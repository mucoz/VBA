Option Explicit

'Created by Mustafa Can Ozturk on 08.02.2021
'===========================================
'The functions below will be used for folder operations
'It includes the most common functions

'Functions:
'Copy, Rename, Exist, Create, Delete, ParentFolder, SubFolders, SubFiles, CreateZipFile, UnzipFile
'===========================================

'These fiels will be used for "SubFolders" function
Private arr() As String
Private Counter As Long

'=======Auxiliary Functions=======
Private Function FSO() As Object
    
    'Set FSO = New FileSystemObject
    Set FSO = CreateObject("Scripting.FileSystemObject")
    
End Function
'=======End of Auxiliary Functions=======

Public Sub Rename(FolderPath As String, NewName As String)
    
    Dim baseFolder As String
    
    If Exist(FolderPath) = True Then
    
        baseFolder = ParentFolder(FolderPath)
        Name FolderPath As baseFolder + NewName
    
    End If
    
End Sub

Public Sub CopyFolder(Source As String, Destination As String)

    FSO.CopyFolder Source, Destination
    
End Sub

Public Property Get Name(FolderPath) As String

    Name = FSO.GetFolder(FolderPath).Name
    
End Property

Public Function SubFiles(FolderPath As String) As Variant

    Dim subFilesArr() As Variant
    Dim files As Object
    Dim file As Object
    Dim i As Long
    
    If Exist(FolderPath) = False Then
    
        SubFiles = "PATH NOT FOUND"
        Exit Function
    
    End If
    
    Set files = FSO.GetFolder(FolderPath).files
    
    If files.Count = 0 Then
    
        SubFiles = "FILE NOT FOUND"
        Exit Function

    End If
    
    i = 0
    
    For Each file In files
        
        ReDim Preserve subFilesArr(i)
        subFilesArr(i) = file.Path
        i = i + 1
        
    Next file
    
    SubFiles = subFilesArr
    
End Function

Public Property Get ParentFolder(ByVal Path As String) As String
    
    ParentFolder = FSO.GetParentFolderName(Path) + DetectSlash(Path)
    
End Property

Private Function DetectSlash(Path As String) As String
    
    If Right(Path, 1) <> "/" Or Right(Path, 1) <> "\" Then
    
        If InStr(Path, "\") > 0 Then
    
            DetectSlash = "\"
        
        ElseIf InStr(Path, "/") > 0 Then
    
            DetectSlash = "/"
        
        End If
    
    End If
    
End Function

Public Function Exist(ByVal FolderPath As String) As Boolean

    If FSO.FolderExists(FolderPath) = True Then
        
        Exist = True
    
    Else
    
        Exist = False
        
    End If
    
End Function

Public Sub Move(ByVal SourcePath As String, DestinationPath As String)

    If Exist(SourcePath) = False Then
    
        Debug.Print "Folder.Move error : source path doesn't exist"
        Exit Sub
        
    ElseIf Exist(DestinationPath) = False Then
    
        Debug.Print "Folder.Move error : destination path doesn't exist"
        Exit Sub
        
    End If
    
    FSO.MoveFolder SourcePath, DestinationPath + DetectSlash(DestinationPath)

End Sub

Public Sub Delete(Path As String)
    
    If Exist(Path) = True Then
    
        FSO.DeleteFolder Path
        
    End If
    
End Sub

Public Sub Create(Path As String)

    If Exist(Path) = False Then
    
        FSO.CreateFolder Path
    
    End If

End Sub

Public Sub CreateZipFile(SourceFolderPath As Variant, DestinationFullName As Variant)

    Dim ShellApp As Object

    'Create an empty zip file
    Open DestinationFullName For Output As #1
    Print #1, Chr$(80) & Chr$(75) & Chr$(5) & Chr$(6) & String(18, 0)
    Close #1
    
    'Copy the files & folders into the zip file
    Set ShellApp = CreateObject("Shell.Application")
    ShellApp.Namespace(DestinationFullName).CopyHere ShellApp.Namespace(SourceFolderPath).Items
    
    'Zipping the files may take a while, create loop to pause the macro until zipping has finished.
    On Error Resume Next
    Do Until ShellApp.Namespace(DestinationFullName).Items.Count = ShellApp.Namespace(SourceFolderPath).Items.Count
        Application.Wait (Now + TimeValue("0:00:01"))
    Loop
    On Error GoTo 0

End Sub

Public Sub UnzipFile(SourceZipPath As Variant, UnzipToPath As Variant)
    
    Dim ShellApp As Object
    
    If Exist(CStr(UnzipToPath)) = False Then
        
        Create CStr(UnzipToPath)
        
        Do While Exist(UnzipToPath) = False
            DoEvents
            Application.Wait (Now + TimeValue("0:00:01"))
        Loop
        
    End If
    
    'Copy the files & folders from the zip into a folder
    Set ShellApp = CreateObject("Shell.Application")

    ShellApp.Namespace(UnzipToPath).CopyHere ShellApp.Namespace(SourceZipPath).Items
    
    
    Set ShellApp = Nothing
    
End Sub

Public Function SubFolders(MainPath As String) As Variant
    
    Erase arr
    
    Counter = 0
    
    Dim myArr
    
    myArr = GetSubFolders(MainPath)
    
    SubFolders = myArr

End Function

Private Function GetSubFolders(RootPath As String) As Variant
    
    Dim fld As Object
    Dim sf As Object
    Dim myArr
    
    If Exist(RootPath) = False Then
        
        GetSubFolders = "INVALID PATH"
        Exit Function
        
    End If
    
    Set fld = FSO.GetFolder(RootPath)
    
    For Each sf In fld.SubFolders
        
        ReDim Preserve arr(Counter)
        
        arr(Counter) = sf.Path
        
        Counter = Counter + 1
        
        myArr = GetSubFolders(sf.Path)
        
        DoEvents
    
    Next
    
    GetSubFolders = arr
    
    Set sf = Nothing
    Set fld = Nothing
    
End Function
